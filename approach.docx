SHL Assessment Recommendation System - Approach

I developed a web-based application to recommend SHL assessments based on natural language queries, utilizing a keyword-matching fallback method due to constraints with external API integration. Below is a detailed overview of the project’s design, implementation, and evaluation:

1. Data Collection and Preparation:
   - The foundation of the system is a manually curated dataset stored in `shl_assessments.csv`. This dataset includes key attributes such as Name, URL, RemoteTesting, AdaptiveIRT, Duration, TestType, and Description, sourced from SHL’s public catalog. The data was organized into a structured CSV format to enable efficient querying and filtering.

2. Tools and Technologies:
   - The application was built using Python, leveraging the Streamlit library for an interactive frontend and Pandas for data manipulation and analysis. The project was developed and tested locally on a Windows system using VS Code. For deployment, Render.com’s free tier was utilized to host the application, ensuring accessibility without additional costs. Git and GitHub were employed for version control and project hosting.

3. Methodology:
   - The recommendation engine employs a keyword-matching algorithm as a fallback approach. The system parses user queries for keywords related to skills (e.g., "Java," "Python") and duration constraints (e.g., "40 mins"). It then matches these keywords against the Description column of the dataset and filters results based on duration when specified. The top 10 matching assessments are displayed in a table, providing users with relevant options. This method ensures reliability and simplicity, avoiding dependencies on external APIs that faced quota limitations.

4. Evaluation and Tracing:
   - The system was rigorously tested with sample queries provided in the assignment, such as "Java developers, 40 mins" and "Python, SQL, JavaScript, 60 mins," to assess relevance and accuracy. Results were manually traced to ensure the keyword-matching logic correctly identified assessments based on skills and duration constraints. The evaluation confirmed that the system meets the basic requirements, with room for improvement through more sophisticated matching if an API were feasible.

5. Output and Deployment:
   - The application is deployed as a live demo accessible at [URL1] (e.g., https://shl-recommender-fallback.onrender.com), where users can input queries and view recommendations. An API endpoint is available at [URL2] (e.g., https://shl-recommender-fallback.onrender.com/?api=true&query="Java developers, 40 mins"), returning results in JSON format. The complete source code, including the dataset and configuration files, is hosted on GitHub at [URL3] (e.g., https://github.com/AYDivyansh/shl-recommender). The `approach.docx` document accompanies the submission to detail the process.

This project demonstrates a practical solution for assessment recommendation using keyword matching, optimized for local development and free-tier deployment. The fallback approach ensures functionality despite API constraints, fulfilling all assignment requirements with a focus on usability and accessibility.

Divyansh Mishra
